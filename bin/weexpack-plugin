#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const create = require('../src/plugin/create');
const cli = require('../src/cli');
const publish = require('../src/publish/publish');

var cordova_lib = require('../lib'),
    cordova = cordova_lib.cordova;
program
  .command('create [plugin_name]')
  .description('create a empty plugin project')
  .action(function (pluginName) {

    if (pluginName.match(/^[$A-Z_][0-9A-Z_-]*$/i)) {
      create(pluginName, program.config)
    } else {
      console.log();
      console.log(`  ${chalk.red('Invalid plugin name:')} ${chalk.yellow(pluginName)}`);
      process.exit();
    }
  });

program
  .option('--ali', 'publish to alibaba internal market(only for alibaba internal network)')
  .option('--market','')
  .command('publish')
  .description('publish current plugin')
  .action(function () {
    publish(program.ali);
  });

program

    .command('link [plugin-path]')
    .description('link a plugin from local into you project')
    .action(function (pluginPath) {
      return cordova.raw["plugin"]("add", [pluginPath], {link:true});
    });

program
  .option('--market','')
  .command('*')
  .description('setup specific plugin into your project')
  .action(function (pluginName) {
    let args=[];
    process.argv.forEach(function(arg,i){
      if(arg!='[object Object]') {//fix commanderâ€™s bug
        args.push(arg);
        if (i == 1) {
          args.push('plugin');
        }
      }
    });
    cli(args);
  });
program.parse(process.argv);


